[/
 / Copyright 2023 Andrey Semashev
 /
 / Distributed under the Boost Software License, Version 1.0.
 / (See accompanying file LICENSE_1_0.txt or copy at
 / https://www.boost.org/LICENSE_1_0.txt)
 /
 / This document is a part of Boost.Scope library documentation.
 /]

[section:unique_resource Unique resource wrapper]

    #include <``[boost_scope_unique_resource_hpp]``>

Boost.Scope provides a [class_scope_unique_resource] class template. This is a wrapper for an arbitrary resource that represents exclusive
ownership of the resource. The wrapper offers access to the owned resource and automatically calls a deleter function object to free the
resource upon destruction. This is a generalization of `std::unique_ptr`, but while `std::unique_ptr` is only used to wrap pointers,
[class_scope_unique_resource] can wrap other types of resources as well.

A resource type must have the following properties to be compatible with [class_scope_unique_resource]:

* Move-constructible, where the move constructor is marked as `noexcept`, or
* Copy-constructible, or
* An lvalue reference to an object type.

Note that if the resource type is a reference, the referenced object must be stored externally to the [class_scope_unique_resource] wrapper
and must remain valid for the entire duration of ownership by the wrapper. Users are not expected to access the resource object other than
through the [class_scope_unique_resource] wrapper. For example, it is not allowed to modify the resource object by setting it to an invalid
state or explicitly freeing the resource circumventing the resource wrapper, as the wrapper will still invoke the deleter on the then-invalid
resource.

The deleter must be a function object type that is callable on an lvalue of the resource type. The deleter must be copy-constructible.
Although not strictly required, it is generally highly recommended that calling a deleter on a resource doesn't throw exceptions and is marked
`noexcept`, as the deleter will often be called from the [class_scope_unique_resource] destructor.

Like `std::unique_ptr`, [class_scope_unique_resource] is not copyable and supports a number of other operations, such as move construction and
assignment, `reset`, `release` and `swap` with the similar semantics. Some of the operations impose additional requirements on the resource and
deleter types; such operations will not be available if those requirements aren't met. For example, `swap` is only supported if both
the resource and deleter types are swappable, and at least one of those types is nothrow swappable (the last part is necessary to implement the
[@https://en.cppreference.com/w/cpp/language/exceptions strong exception guarantee] for the `swap` operation). The requirements are listed for
each operation in the [class_scope_unique_resource] class reference.

[tip If the resource type is dereferenceable (i.e. supports unary `operator*`), [class_scope_unique_resource] also provides `operator*` and
`operator->`, making it act more like a smart-pointer.]

Let's consider a usage example. Here, we need to compare the contents of two files; `equal_files` returns `true` if the files have equal
contents and `false` otherwise.

    // A deleter for POSIX-like file descriptors
    struct fd_deleter
    {
        void operator() (int fd) const noexcept
        {
            if (fd >= 0)
                close(fd);
        }
    };

    // Opens a file with the given filename for reading and returns wrapped file descriptor
    boost::scope::unique_resource< int, fd_deleter > open_file(std::string const& filename)
    {
        boost::scope::unique_resource< int, fd_deleter > file(open(filename.c_str(), O_RDONLY));
        if (file.get() < 0)
        {
            int err = errno;
            throw std::system_error(err, std::generic_category(), "Failed to open file " + filename);
        }

        return file;
    }

    // Reads contents of a file denoted by fd into buffer and returns the number of read bytes
    std::size_t read_file(int fd, unsigned char* buf, std::size_t size)
    {
        std::size_t total_read_size = 0;
        while (total_read_size < size)
        {
            ssize_t read_size = read(fd, buf + total_read_size, size - total_read_size);
            if (read_size < 0)
            {
                int err = errno;
                if (err == EINTR)
                    continue;
                throw std::system_error(err, std::generic_category(), "Failed to write data");
            }

            if (read_size == 0)
            {
                // End of file
                break;
            }

            total_read_size += read_size;
        }

        return total_read_size;
    }

    // Compares contents of two files for equality
    bool equal_files(std::string const& filename1, std::string const& filename2)
    {
        // Create unique resource wrappers for files
        auto file1 = open_file(filename1.c_str());
        auto file2 = open_file(filename2.c_str());

        // Use them to read file contents
        constexpr std::size_t buf_size = 1024;
        unsigned char buf1[buf_size];
        unsigned char buf2[buf_size];
        while (true)
        {
            std::size_t size1 = read_file(file1.get(), buf1, buf_size);
            std::size_t size2 = read_file(file2.get(), buf2, buf_size);

            if (size1 != size2)
            {
                // File sizes are different
                return false;
            }

            if (std::memcmp(buf1, buf2, size1) != 0)
            {
                // File contents are different
                return false;
            }

            if (size1 < buf_size)
            {
                // Files have ended. At this point we know they have equal contents.
                break;
            }
        }

        return true;
    }

[note POSIX-like file descriptors are supported on Windows through non-standard APIs like
[@https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/open-wopen `_open`],
[@https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/close `_close`],
[@https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/write `_write`] and others. It is often possible to port a program
performing simple IO with regular files and file descriptors to Windows by simple renaming. However, here and below we will be using
the standard POSIX nomenclature.]

In this example, there are several points to note. First, the `fd_deleter` function object checks if the file descriptor is valid before
passing it to `close`. This is necessary in this piece of code because we unconditionally initialize [class_scope_unique_resource] object
with the value returned by `open`, which may be -1 indicating an error. By default, [class_scope_unique_resource] doesn't discriminate
valid (i.e. allocated) resource values from invalid (i.e. unallocated), which means that from its perspective the value of -1 is a file
descriptor that needs to be freed by calling the deleter on it. Therefore, the deleter must be prepared to handle resource values that are
unallocated. Later on we will see how to change this.

[tip Besides the resource value, you can specify the deleter object as the second argument of the [class_scope_unique_resource] constructor.
In fact, the second argument is mandatory if the deleter is not default-constructible or its default constructor may throw. This is
necessary to be able to call the deleter on the passed resource value, should the construction of either the resource or the deleter throw.
This ensures that the resource doesn't leak in case if [class_scope_unique_resource] initialization fails.]

Second, we still need to check if opening the file succeeded before using it. Since [class_scope_unique_resource] in this example is always
constructed in allocated state, we have to check the file descriptor value for being negative. In order to access the resource value one
can use the `get` method of [class_scope_unique_resource].

We can improve this example by making [class_scope_unique_resource] initialization automatically check for the file descriptor validity.
This will only require modifying `fd_deleter` and `open_file`, the rest of the code stays unchanged.

    // A deleter for POSIX-like file descriptors
    struct fd_deleter
    {
        void operator() (int fd) const noexcept
        {
            close(fd);
        }
    };

    // Opens a file with the given filename for reading and returns wrapped file descriptor
    boost::scope::unique_resource< int, fd_deleter > open_file(std::string const& filename)
    {
        auto file = boost::scope::make_unique_resource_checked(
            open(filename.c_str(), O_RDONLY)
            -1,
            fd_deleter());
        if (!file.allocated())
        {
            int err = errno;
            throw std::system_error(err, std::generic_category(), "Failed to open file " + filename);
        }

        return file;
    }

Here, the `make_unique_resource_checked` helper function performs the following:

# If the resource value, which is the first argument - the result of the `open` call, is equal to the invalid resource value, which is
  the second argument, creates and returns an unallocated [class_scope_unique_resource] object.
# Otherwise, creates and returns an allocated [class_scope_unique_resource] object that wraps the result of the `open` call.
# In both cases, the third argument is used to initialize the deleter in the returned [class_scope_unique_resource] object.

Note that if `open` fails and returns -1, the deleter is guaranteed not to be called on this resource value - neither by
`make_unique_resource_checked` nor by [class_scope_unique_resource], not even if [class_scope_unique_resource] construction fails with an
exception. This allows us to simplify `fd_deleter` and remove the check for negative `fd` values.

Furthermore, since the returned [class_scope_unique_resource] object now properly indicates whether the resource is allocated or not,
we can use the `allocated` member function to test it instead of checking the resource value. This makes the code more readable.

[note In order to avoid confusion with the [class_scope_unique_resource] object being always allocated after construction with a resource
value, it is recommended to always use either the `make_unique_resource_checked` factory function or resource traits, as described in
the next section.]

[section:resource_traits Resource traits]

The [class_scope_unique_resource] class template also supports an optional third template parameter, which can be used to specify a resource
traits class. Resource traits provide [class_scope_unique_resource] with additional knowledge about the resource features that allow for
a more efficient implementation. This is useful when there is one or more resource value that is considered unallocated, that is such a value
that does not identify an allocated resource that needs to be freed. For example, for pointer resource types, null is usually considered as
the unallocated value, and for POSIX-like file descriptors, all negative values are unallocated values, since no valid file descriptor
can be negative.

If specified, resource traits must be a class with the following public static member functions:

* `bool is_allocated(R const& r) noexcept` - must return `true` if the resource value `r` is an allocated resource value and `false` otherwise.
* `R make_default() noexcept` - must return an unallocated resource value that can be used to initialize the default-constructed
  [class_scope_unique_resource] object. Note that calling `is_allocated` on the value returned by `make_default` must always return `false`.

Note that all operations must be non-throwing. When the conforming resource traits are provided, [class_scope_unique_resource] behavior changes
as follows:

* [class_scope_unique_resource] will no longer separately track whether it is in allocated state or not and instead will use `is_allocated`
  on the wrapped resource value for this. In particular, this means that constructing [class_scope_unique_resource] from a resource value
  may now produce a wrapper in an unallocated state, if the resource value is an unallocated value.
* Default constructor, `reset`, move constructor and move assignment of [class_scope_unique_resource] will use `make_default` to initialize
  the resource value in the unallocated wrapper (for move operations - in the move source).

Using the resource traits allow us to further improve the example given in the previous section. Again, our primary interest is `open_file`
and `unique_resource` type usage, the rest of `equal_files` implementation remains unchanged.

    // A deleter for POSIX-like file descriptors
    struct fd_deleter
    {
        void operator() (int fd) const noexcept
        {
            close(fd);
        }
    };

    // Resource traits for POSIX-like file descriptors
    struct fd_resource_traits
    {
        static bool is_allocated(int fd) noexcept
        {
            return fd >= 0;
        }

        static bool make_default() noexcept
        {
            // Return any unallocated resource value
            return -1;
        }
    };

    // A shorthand type alias for unique file descriptor wrappers
    using unique_fd = boost::scope::unique_resource< int, fd_deleter, fd_resource_traits >;

    // Opens a file with the given filename for reading and returns wrapped file descriptor
    unique_fd open_file(std::string const& filename)
    {
        unique_fd file(open(filename.c_str(), O_RDONLY));
        if (!file.allocated())
        {
            int err = errno;
            throw std::system_error(err, std::generic_category(), "Failed to open file " + filename);
        }

        return file;
    }

In this piece of code, we no longer need to use `make_unique_resource_checked` every time we open a file (or otherwise create a file
descriptor), and therefore we don't have to duplicate the invalid file descriptor value or the deleter - this information is provided
by `fd_resource_traits` and conveniently embedded in the `unique_fd` type. As before, if `open` fails and returns -1, the constructed
[class_scope_unique_resource] object will be in an unallocated state, meaning that we can use `allocated` accessor, and that the deleter
will only be called if `open` succeeded.

[tip The `fd_deleter`, `fd_resource_traits` and `unique_fd` types presented in the examples above are provided by the library out of
the box in [boost_scope_fd_resource_hpp] and [boost_scope_unique_fd_hpp] headers.]

[endsect]

[endsect]
